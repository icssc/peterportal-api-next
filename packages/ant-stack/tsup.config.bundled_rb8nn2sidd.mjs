// tsup.config.ts
import path4 from "node:path";
import { defineConfig } from "tsup";

// src/utils/directories.ts
import fs from "node:fs";
import path from "node:path";
function findFilesRecursively(directory) {
  return fs
    .readdirSync(directory)
    .map((name) => path.join(directory, name))
    .flatMap((fileOrDirectory) =>
      fs.statSync(fileOrDirectory).isDirectory()
        ? findFilesRecursively(fileOrDirectory)
        : fileOrDirectory
    );
}

// src/utils/execute-jit.ts
import path2 from "node:path";
import createJITI from "jiti";

// src/utils/files.ts
import fs2 from "node:fs";
import os from "node:os";
import path3 from "node:path";

// src/utils/static-analysis.ts
import fs3 from "node:fs";
import { parse } from "acorn";

// src/utils/wait-for-stack-idle.ts
import {
  DescribeStacksCommand,
  StackStatus,
  waitUntilStackCreateComplete,
  waitUntilStackDeleteComplete,
  waitUntilStackUpdateComplete,
} from "@aws-sdk/client-cloudformation";

// tsup.config.ts
var constructDirectory = "src/cdk/constructs";
var allFilesInConstructs = findFilesRecursively(constructDirectory);
var constructs = allFilesInConstructs
  .filter((file) => path4.extname(file) === ".ts")
  .filter((file) => {
    const directory = path4.dirname(file);
    const fileName = path4.basename(file, ".ts");
    return fileName === "index" || directory !== fileName;
  })
  .map((file) => path4.parse(file))
  .reduce((constructEntryPoints, file) => {
    console.log({ file });
    const name =
      file.name === "index"
        ? path4.relative(constructDirectory, file.dir)
        : path4.join(path4.relative(constructDirectory, file.dir), file.name);
    constructEntryPoints[`constructs/${name}`] = file.dir;
    return constructEntryPoints;
  }, {});
var tsup_config_default = defineConfig({
  entry: {
    cli: "src/cli/index.ts",
    config: "src/config.ts",
    "lambda-core": "src/lambda-core/index.ts",
    utils: "src/utils/index.ts",
    ...constructs,
  },
  bundle: true,
  format: ["esm"],
  sourcemap: true,
  dts: true,
  splitting: false,
  clean: true,
  shims: true,
});
export { tsup_config_default as default };
//# sourceMappingURL=data:application/json;base64,
